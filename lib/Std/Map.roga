module Std.Map { count, fromPairs, isEmpty, keys, map, mapKeys, mapValues, reduce, values }

let map m f =
  let
    map_ acc {} _ =
      fromPairs acc
    map_ acc {k => v :: rest} f =
      [f {k, v} :: map_ rest f]
  in
    map_ [] m f


let mapKeys m f =
  let
    mapKeys_ acc {} _ =
      fromPairs acc
    mapKeys_ acc {k => v :: rest} f =
      mapKeys_  [{f k, v} :: acc] rest f
  in
    mapKeys_ [] m f


let mapValues m f =
  let
    mapValues_ acc {} _ =
      fromPairs acc
    mapValues_ acc {k => v :: rest} f =
      mapValues_ [{k, f v} :: acc] rest f
  in
    mapValues_ [] m f


let count m =
  let
    count_ acc {} =
      acc
    count_ acc {_ => _ :: rest} =
      count_ (acc + 1) rest
  in
    count_ 0 m


let isEmpty m =
  (count m) == 0


let reduce {} acc _ =
  acc
let reduce {k => v :: rest} acc f =
  reduce rest (f {k,v} acc) f

let keys m =
  let
    keys_ acc {} =
      acc
    keys_ acc {k => _ :: rest} =
      keys_ [k :: acc] rest
  in
    keys_ [] m


let fromPairs list =
  let
    fromPairs_ acc [] =
      acc
    fromPairs_ acc [{k,v} :: rest] =
      fromPairs_ {k => v :: acc} rest
  in
    fromPairs_ {} list


let values m =
  m |> map ({_, v} -> v)

let insertOrUpdate map key value fn =
  if (map |> contains key) then
    (map |> update key fn)
  else
    (map |> insert key value)
