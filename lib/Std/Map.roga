module Std.Map { count, fromPairs, isEmpty, keys, map, mapKeys, mapValues, reduce, values }

let count m =
  let
    count_ acc {} =
      acc
    count_ acc {rest :: _ : _} =
      count_ (acc + 1) rest
  in
    count_ 0 m


let fromPairs list =
  let
    fromPairs_ acc [] =
      acc
    fromPairs_ acc [{k,v} :: rest] =
      fromPairs_ {acc :: k : v} rest
  in
    fromPairs_ {} list


let isEmpty m =
  (count m) == 0


let keys m =
  let
    keys_ acc {} =
      acc
    keys_ acc {rest :: k : _} =
      keys_ [k :: acc] rest
  in
    keys_ [] m


let map m f =
  let
    map_ acc {} _ =
      acc
    map_ acc {rest :: k : v} f =
      map_ (acc |> Map.insert (f k v)) rest f
  in
    map_ {} m f


let mapKeys map f =
  let
    mapKeys_ acc {} _ =
      acc
    mapKeys_ acc {rest :: k : v} f =
      mapKeys_ {acc :: (f k) : v} rest f
  in
    mapKeys_ {} map f


let mapValues map f =
  let
    mapValues_ acc {} _ =
      acc
    mapValues_ acc {rest :: k : v} f =
      mapValues_ {acc :: k : (f v)} rest f
  in
    mapValues_ {} map f


let reduce {} acc _ =
  acc
let reduce {rest :: k : v} acc f =
  reduce rest (f {k,v} acc) f


let values map =
  let
    values_ acc {} =
      acc
    values_ acc {rest :: _ : v} =
      values_ [v :: acc] rest
  in
    values_ [] map


let toList map =
  let
    toList_ acc {} = acc
    toList_ acc {rest :: k : v} = toList_ [{k,v} :: acc] rest
  in
    toList_ [] map
