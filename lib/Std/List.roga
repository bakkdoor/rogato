module Std.List {
  all, any, concat, contains, count, countBy, drop, find, findIndex, flatten, isList,
  intersection,  head, isEmpty, filter, groupBy, map, merge, mergeSort, partition,
  reduce, reject, repeat, reverse, reverseAppend, skip, sort, sortBy, tail, take, zip, zipWith
}

let head [x :: _]  = x


let tail [_ :: xs] = xs


let map list f =
  let
    map_ acc [] _ =
      reverse acc

    map_ acc [x :: xs] f =
      map_ [f x :: acc] xs f
  in
    map_ [] list f


let all list fn =
  let
    all_ acc [] _ =
      acc

    all_ acc [x :: xs] fn =
      if (fn x) then
        (all_ true xs fn)
      else
        false
  in
    all_ true list fn


let any list fn =
  let
    any_ acc [] _ =
      acc

    any_ acc [x :: xs] fn =
      if (fn x) then
        true
      else
        (any_ false xs fn)
  in
    any_ false list fn


let concat lists =
  let
    concat_ acc [] =
      (reverse acc)

    concat_ acc [list :: lists] =
      (concat_ (List.join (List.reverse list) acc) lists)
  in
    concat_ [] lists


let contains element list =
  let
    contains_ acc [] _ =
      acc

    contains_ acc [x :: xs] element =
      if (x == element) then
        true
      else
        (contains_ false xs element)
  in
    contains_ false list element


let count list =
  let
    count_ acc [] =
      acc

    count_ acc [_ :: xs] =
      count_ (acc + 1) xs
  in
    count_ 0 list


let countBy list fn =
  let
    countBy_ acc [] =
      acc

    countBy_ acc [x :: xs] =
      countBy_ (acc + (fn x)) xs
  in
    countBy_ 0 list


let drop list n =
  skip list n


let find list fn =
  let
    find_ acc [] _ =
      acc

    find_ acc [x :: xs] fn =
      if (fn x) then
        x
      else
        (find_ null xs fn)
  in
    find_ null list fn


let findIndex list fn =
  let
    findIndex_ acc [] _ =
      acc

    findIndex_ acc [x :: xs] fn =
      if (fn x) then
        acc
      else
        (findIndex_ (acc + 1) xs fn)
  in
    findIndex_ 0 list fn


let flatten list =
  let
    flatten_ acc [] =
      (reverse acc)

    flatten_ acc [x :: xs] =
      if (isList x) then
        (flatten_ (List.join (List.reverse x) acc) xs)
      else
        (flatten_ [x :: acc] xs)
  in
    flatten_ [] list


let isList [] = true
let isList [_ :: _] = true
let isList _ = false


let isEmpty [] = true
let isEmpty _  = false


let intersection list1 list2 =
  filter list1 (element -> (List.contains element list2))


let filter list fn =
  let
    filter_ acc [] _ =
      reverse acc

    filter_ acc [x :: xs] fn =
      if (fn x) then
        (filter_ [x :: acc] xs fn)
      else
        (filter_ acc xs fn)
  in
    filter_ [] list fn


let groupBy list fn =
  let
    groupBy_ acc [] _ =
      acc
      |> Map.mapValues ^List.reverse

    groupBy_ groups [x :: xs] fn =
      groups
      |> Map.insertOrUpdate (fn x) [x] (group -> [x :: group])
      |> groupBy_ xs fn
  in
    groupBy_ {} list fn


let merge left right cmp =
  merge_ [] left right cmp


let merge_ acc [] right _ =
  reverseAppend acc right
let merge_ acc left [] _ =
  reverseAppend acc left
let merge_ acc [l :: ls] [r :: rs] cmp =
  if (cmp l r) then
    (merge_ [l :: acc] ls [r :: rs] cmp)
  else
    (merge_ [r :: acc] [l :: ls] rs cmp)


let mergeSort [] _ =
  []
let mergeSort [x] _ =
  [x]
let mergeSort list cmp =
  let
    half =
      Math.ceil ((List.length list) / 2)
    left =
      mergeSort (List.take list half) cmp
    right =
      mergeSort (List.drop list half) cmp
  in
      merge left right cmp


let partition list fn =
  let
    partition_ acc1 acc2 [] _ =
      {true:  (List.reverse acc1), false: (List.reverse acc2)}

    partition_ acc1 acc2 [x :: xs] fn =
      if (fn x) then
        (partition_ [x :: acc1] acc2 xs fn)
      else
        (partition_ acc1 [x :: acc2] xs fn)
  in
    partition_ [] [] list fn


let reduce [] acc f =
  acc
let reduce [x :: xs] acc f =
  reduce xs (f x acc) f


let reject list f =
  list
  |> filter (x -> not (f x))


let repeat iterations fn =
  repeat_ [] iterations 0 fn

let repeat_ acc max n fn =
  let
    values = [fn n :: acc]
  in
    if (n == (max - 1)) then
      (reverse values)
    else
      (repeat_ values max (n + 1) fn)


let reverse list =
  let
    reverse_ acc [] =
      acc
    reverse_ acc [x :: xs] =
      reverse_ [x :: acc] xs
  in
    reverse_ [] list


let reverseAppend left right =
  join (reverse left) right


let skip list 0 =
  list
let skip [] n =
  []
let skip [x :: xs] n =
  skip xs (n - 1)


let sort list ascending =
  if ascending then
    (sortBy list (a b -> (a < b)))
  else
    (sortBy list (a b -> (a > b)))


let sortBy list cmp =
  mergeSort list cmp


let take list n =
  let
    take_ acc _ 0 =
      reverse acc

    take_ acc [] _ =
      reverse acc

    take_ acc [x :: xs] n =
      take_ [x :: acc] xs (n - 1)
  in
    take_ [] list n


let zip xs ys =
  let
    zip_ acc [] _ =
      reverse acc

    zip_ acc _ [] =
      reverse acc

    zip_ acc [x :: xs] [y :: ys] =
      zip_ [{x, y} :: acc] xs ys
  in
    zip_ [] xs ys


let zip3 xs ys zs =
  let
    zip3_ acc [] _ _ =
      reverse acc

    zip3_ acc _ [] _ =
      reverse acc

    zip3_ acc _ _ [] =
      reverse acc

    zip3_ acc [x :: xs] [y :: ys] [z :: zs] =
      zip3_ [{x, y, z} :: acc] xs ys zs
  in
    zip3_ [] xs ys zs


let zip4 ws xs ys zs =
  let
    zip4_ acc [] _ _ _ =
      reverse acc

    zip4_ acc _ [] _ _ =
      reverse acc

    zip4_ acc _ _ [] _ =
      reverse acc

    zip4_ acc _ _ _ [] =
      reverse acc

    zip4_ acc [w :: ws] [x :: xs] [y :: ys] [z :: zs] =
      zip4_ [{w, x, y, z} :: acc] ws xs ys zs
  in
    zip4_ [] ws xs ys zs


let zipWith xs ys fn =
  let
    zipWith_ acc [] _ _ =
      reverse acc

    zipWith_ acc _ [] _ =
      reverse acc

    zipWith_ acc [x :: xs] [y :: ys] fn =
      zipWith_ [fn x y :: acc] xs ys fn
  in
    zipWith_ [] xs ys fn
