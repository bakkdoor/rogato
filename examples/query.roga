type Person :: {
  name :: String
  age :: Uint
}

let teens =
  ? p <- Person
  ! (p.age >= 10)
  ! (p.age < 20)
  !> p

let tweens =
  ? p <- Person
  ! (p.age >= 20)
  ! (p.age < 30)
  !> p

let ageGroup decade =
  ? p <- Person
  ! (p.age >= (decade * 10))
  ! (p.age < ((decade + 1) * 10))
  !> p

let friendsOfAgeGroup decade =
  ? p <- ageGroup decade
  ? f <- p#Friend
  ?! f <- (teens | tweens)
  !> f

// return all shared friends in people
// a shared friend is a friend of at least 2 different people
let sharedFriends people =
  ? p1, p2 <- people
  ? f <- p1#Friend
  ? f <- p2#Friend
  !> f

let friendsAndFamilyWithin people person =
  let
    family =
      ? p <- people
      ? p <- person#Related
      !> p,

    friends = p ->
      ? f <- people
      ? f <- p#Friend
      !> f,

    friendsOfFriends =
      ? p, f <- people
      ? p <- person#Friend
      ? f <- p#Friend
      !> f,

    friendsOfFriendsWithoutFamily =
      ? p <- friendsOfFriends
      ?! p <- family
      !> p
  in
    {person, [{"family",family}, {"friends",friends person}, {"friendsOfFriends",friendsOfFriends}]}
