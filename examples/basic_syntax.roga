// top module comment
module BasicSyntaxTest { test, square, add }

let test x =
  "Testing " ++ (toString x)

let square x =
  x * x

let add a b =
  a + b

let join a b c =
  // comment above expression
  // another comment above expression
  // yet another comment above expression
  (a ++ b) ++ c

// this is a comment
// and another one
let belowComment = "this function has a comment above!"

let foo x =
  x
  |> inspect
  |> repeat 10

let fooWithSymbol =
  [1,2,3]
  |> List.map (x -> {^Hello, x})
  // => [(^Hello, 1), (^Hello, 2), (^Hello, 3)]

let codegen fnName args =
  // ^ = quote (ideally hygenic, scheme-style macros) in front of expressions
  // ~ = unquote within quoted expressions
  ^(let ~fnName ~args =
      IO.println "calling function {} with {}" [~fnName, ~args]
   )

let mapQuoted list =
  list
  |> List.map (x -> ^(let ~x = "Hello, world!"))
  |> List.map Std.Runtime.evaluate

let lambdasWithPatternMatching list =
  list
  |> List.map (
    0 -> "done",
    n -> Std.Math.min n 10
  )
